# currency exchange microservice will run on 8000, 8001, 8002..
server.port=8000

# microservice name should match the property file it wants to fetch from config server.
# in our case the file is `currency-exchange.properties` so our service name should be `currency-exchange`.
spring.application.name=currency-exchange

# adding reference to our config server running on port 8888.
# config server can be marked as optional using `spring.config.import=optional:configserver:http://localhost:8888`.
spring.config.import=optional:configserver:http://localhost:8888
# `currency-exchange.properties` will be picked
spring.cloud.config.profile=dev
# if you want to use a property file other than `currency-exchange.properties`.
# for instance you want to access `currency-exchange-custom.properties`
# spring.cloud.config.name=currency-exchange-custom

# database configs
spring.datasource.url=jdbc:h2:mem:testdb
# this will create tables using ORMs. Insert values are picked from data.sql.
spring.jpa.defer-datasource-initialization=true 
spring.jpa.show-sql=true
spring.h2.console.enabled=true

# eureka client configs
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka

# circuit breaker custom retry attempts and gives 2 second break each time
resilience4j.retry.instances.sample-api-retry-limit.maxRetryAttempts=5
resilience4j.retry.instances.sample-api-retry-limit.waitDuration=2s
# This config will delay the retries a little more further
resilience4j.retry.instances.sample-api-retry-limit.enableExponentialBackoff=true

# only when the circuit breaker requests fail for more than 90 percent, then switch to open state.
# [Refer for more https://resilience4j.readme.io/docs/circuitbreaker]
# resilience4j.circuitbreaker.instances.default.failureRateThreshold=90 

# Rate limited which allows only 2 requests per 10 seconds
resilience4j.ratelimiter.instances.default.limitForPeriod=2
resilience4j.ratelimiter.instances.default.limitRefreshPeriod=10s

# Bulk head 
resilience4j.bulkhead.instances.default.maxConcurrentCalls=10
